{"version":3,"sources":["lib/movingai2json.js"],"names":[],"mappings":";;;AACA,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,UAAU,EAAE;AAC9B,UAAM,CAAC,cAAc,CAAC,MAAM,CAAC,SAAS,EAAE,YAAY,EAAE;AAClD,kBAAU,EAAE,KAAK;AACjB,oBAAY,EAAE,KAAK;AACnB,gBAAQ,EAAE,KAAK;AACf,aAAK,EAAE,eAAS,YAAY,EAAE,QAAQ,EAAE;AACpC,oBAAQ,GAAG,QAAQ,IAAI,CAAC,CAAC;AACzB,mBAAO,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,QAAQ,CAAC,KAAK,QAAQ,CAAC;SAChE;KACJ,CAAC,CAAC;CACN;;AAGD,SAAS,cAAc,CAAE,UAAU,EAAE;AACjC,QAAI,YAAY,GAAG,UAAC,cAAc,EAAK;AACnC,YAAI,QAAQ,GAAG,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACzC,eAAO,MAAM,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;KACjE,CAAC;;AAEF,QAAI,QAAQ,GAAG,EAAE,CAAC;;AAElB,QAAI,eAAe,GAAG,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC7C,QAAI,CAAC,GAAG,CAAC,CAAC;AACV,QAAI,OAAO,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;;AAExC,WAAO,CAAC,GAAG,eAAe,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;AAC7D,YAAI,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;AAC9B,oBAAQ,CAAC,MAAM,GAAG,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;SAC/D,MAAM,IAAI,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;AACpC,oBAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;SAC9D,MAAM,IAAI,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;AACnC,oBAAQ,CAAC,IAAI,GAAG,YAAY,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;SAC/C;AACD,eAAO,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AACpC,SAAC,EAAE,CAAC;KACP;;;AAGD,YAAQ,CAAC,MAAM,GAAG,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AAC7C,SAAK,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,QAAQ,CAAC,MAAM,EAAC,CAAC,EAAE,EAAE;AAChC,gBAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC/C,aAAK,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,QAAQ,CAAC,KAAK,EAAC,CAAC,EAAE,EAAE;AAC/B,oBAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACnD;KACJ;AACD,WAAO,QAAQ,CAAC;CACnB;;AAED,OAAO,CAAC,cAAc,GAAG,cAAc,CAAC","file":"lib/movingai2json.js","sourcesContent":["// Polyfill for startsWith.\r\nif (!String.prototype.startsWith) {\r\n    Object.defineProperty(String.prototype, 'startsWith', {\r\n        enumerable: false,\r\n        configurable: false,\r\n        writable: false,\r\n        value: function(searchString, position) {\r\n            position = position || 0;\r\n            return this.lastIndexOf(searchString, position) === position;\r\n        }\r\n    });\r\n}\r\n\r\n\r\nfunction parseMapString (map_string) {\r\n    var parseCommand = (command_string) => {\r\n        var splitted = command_string.split(\" \");\r\n        return Object.freeze({name: splitted[0], value: splitted[1]});\r\n    };\r\n\r\n    var json_map = {};\r\n\r\n    var themap_splitted = map_string.split(\"\\n\");\r\n    var i = 0;\r\n    var command = themap_splitted[i].trim();\r\n    // Parse Header\r\n    while (i < themap_splitted.length && !command.startsWith(\"map\")) {\r\n        if (command.startsWith(\"height\")) {\r\n            json_map.height = parseInt(parseCommand(command).value, 10);\r\n        } else if (command.startsWith(\"width\")) {\r\n            json_map.width = parseInt(parseCommand(command).value, 10);\r\n        } else if (command.startsWith(\"type\")) {\r\n            json_map.type = parseCommand(command).value;\r\n        }\r\n        command = themap_splitted[i].trim();\r\n        i++;\r\n    }\r\n\r\n    // Parse Map\r\n    json_map.matrix = new Array(json_map.height);\r\n    for (var r=0;r<json_map.height;r++) {\r\n        json_map.matrix[r] = new Array(json_map.width);\r\n        for (var c=0;c<json_map.width;c++) {\r\n            json_map.matrix[r][c] = themap_splitted[r+i][c];\r\n        }\r\n    }\r\n    return json_map;\r\n}\r\n\r\nexports.parseMapString = parseMapString;"]}